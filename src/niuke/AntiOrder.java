package niuke;

/**
 * Created by licheng on 12/5/17.
 */
public class AntiOrder {

    public static void  main(String args[]){



        System.out.println(count2(new int[]{2506437,1678253,1686990,1226120,1978369,2925527,1093247,539765,1397554,2811480,1030911,1404313,2225582,1354821,254286,2804514,1861463,1304284,1581472,631536,417180,3010645,374547,2673046,832031,2202421,1284116,2131019,2061562,1202654,171930,2074816,172710,2745521,2688800,2974317,158593,2221878,433945,1471582,595462,1483741,2682995,435376,149834,1226682,312371,1818,1665703,2555559,615778,553080,1659281,1665757,1150515,2181583,727165,1482528,803965,2994553,648494,3012361,2473016,1809867,248290,1584500,2319329,988986,2377674,39169,1148818,871969,1887091,592413,1042653,309195,544202,1839097,2526283,2734787,2319678,2495851,30276,2267521,2807656,174680,2446620,1111136,559142,2831620,421954,1770895,468975,1956368,232580,651244,1876893,2033837,935375,567545,1192622,2151567,1853828,821267,2416642,1490928,764034,431273,2377932,1610264,1624428,1432002,962009,1731188,1141353,360570,1643618,811997,2170885,303739,1226254,771985,2545439,2296343,2550579,1568320,2262686,1968659,1115422,1895806,2577977,473336,659568,511068,2453827,1702191,468043,1153023,1822902,1736965,2532046,1153152,1858443,837248,1603078,2815708,1863554,906468,936080,3017813,987759,2916518,1724507,1873990,247488,2632763,2017809,720625,2564340,106099,138401,246532,2408923,1428164,1447125,2832056,688031,1564278,395701,2670226,2186320,313229,2448269,1253905,2217581,2550975,125630,1141490,343270,1353613,1583248,1215477,340759,1371148,1061456,1718599,797269,477574,2532489,242458,1424991,2166376,278551,2373606,2923611,2925027,1154092,1436229,1572252,97251,2603402,1767927,576656,1623568},204));

    }

    public static int count2(int[] A, int n) {
        int count = 0;
        int i,j;
        if(n < 2) return n;
        for(i=0;i<n;i++){
            for(j=0;j<n-i-1;j++){
                if(A[j]>A[j+1]){
                    int temp = A[j];
                    A[j]=A[j+1];
                    A[j+1]=temp;
                    count++;
                }
            }
        }
        return count;
    }

    Node root = null;

    public int count(int[] A, int n) {
        int res = 0;
        for (int i = 0; i < n; i++) {
            res  += helper(A[i]);
        }
        return res;
    }

    public int helper(int a) {
        if (root == null) {
            root = new Node(a);
            return 0;
        } else {
            root.insert(a);
            return root.getRank(a);
        }
    }
}

class Node {
    int leftSize = 0;
    Node left, right;
    int val;

    public Node(int v) {
        val = v;
    }

    public void insert(int v) {
        if (v > val) {
            if (left != null)
                left.insert(v);
            else
                left = new Node(v);
            leftSize++;
        } else {
            if (right != null)
                right.insert(v);
            else
                right = new Node(v);
        }
    }

    public int getRank(int v) {
        if (v == val)
            return leftSize;
        if (v > val)
            return left.getRank(v);
        if (v < val)
            return leftSize + 1 + right.getRank(v);
        return 0;
    }
}
